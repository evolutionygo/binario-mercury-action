name: Build YGO Mobile with Docker

on:
  push:
    branches:
      - main  # ‚úÖ Workflow se ejecuta en la rama main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository of the Action
        uses: actions/checkout@v3
        with:
          path: action-repo  # ‚úÖ Este es el repositorio donde est√° build_ygopro.sh

      - name: Debug - Verificar existencia del script de compilaci√≥n
        run: |
          if [ ! -f action-repo/scripts/build_ygopro.sh ]; then
            echo "‚ùå ERROR: El script de compilaci√≥n NO EXISTE en action-repo/scripts/"
            exit 1
          fi
          chmod +x action-repo/scripts/build_ygopro.sh
          echo "‚úÖ Script de compilaci√≥n listo."

      - name: Start Docker Build Process
        run: |
          echo "üîÑ Iniciando el proceso de compilaci√≥n en Docker..."
          cd action-repo
          ./scripts/build_ygopro.sh
          echo "‚úÖ Proceso de compilaci√≥n en Docker finalizado."

      # ‚úÖ Clonamos el REPO PRINCIPAL (YGOPRO) en la rama SERVER
      - name: Checkout Principal Repository (YGOPRO - MyCard)
        uses: actions/checkout@v3
        with:
          repository: mycard/ygopro
          ref: server
          path: base-repo

      # ‚úÖ Clonamos el REPO SECUNDARIO (ygopro-evolution-bin) en la rama SERVER
      - name: Checkout Secondary Repository (ygopro-evolution-bin)
        run: |
          echo "üîÑ Clonando el repositorio secundario..."
          git clone --branch=server --depth=1 https://github.com/termitaklk/ygopro-evolution-bin merge-repo
          echo "‚úÖ Repositorio secundario clonado en merge-repo/"

      - name: Define List of Files to Replace
        run: |
          echo "Definiendo archivos a reemplazar dentro del contenedor..."
          echo "FILES=gframe/deck_manager.cpp gframe/deck_manager.h gframe/data_manager.cpp" >> $GITHUB_ENV
          echo "‚úÖ Archivos definidos: gframe/deck_manager.cpp, gframe/deck_manager.h, gframe/data_manager.cpp"

      - name: Copy and Replace Selected Files in Docker Container
        run: |
          echo "üîÑ Copiando archivos modificados dentro del contenedor Docker..."
          CONTAINER_ID=$(docker ps -q --filter ancestor=ygopro-builder:latest)
          if [ -z "$CONTAINER_ID" ]; then
            echo "‚ùå ERROR: No se encontr√≥ un contenedor en ejecuci√≥n basado en ygopro-builder."
            exit 1
          fi
          for file in $FILES; do
            if [ -f "merge-repo/$file" ]; then
              docker cp "merge-repo/$file" "$CONTAINER_ID:/workspace/$file"
              echo "‚úÖ Archivo reemplazado dentro del contenedor: $file"
            else
              echo "‚ö†Ô∏è Archivo no encontrado en el repositorio secundario: $file"
            fi
          done

      - name: Validate Binary Existence in Container
        run: |
          echo "üîç Verificando existencia del binario dentro del contenedor..."
          CONTAINER_ID=$(docker ps -q --filter ancestor=ygopro-builder:latest)
          if [ -z "$CONTAINER_ID" ]; then
            echo "‚ùå ERROR: No se encontr√≥ un contenedor en ejecuci√≥n basado en ygopro-builder."
            exit 1
          fi
          docker exec "$CONTAINER_ID" ls -l /workspace/build/ygopro || echo "‚ùå Binario no encontrado dentro del contenedor."

      - name: Copy Compiled Binary from Container
        run: |
          echo "üìÇ Copiando el binario compilado fuera del contenedor..."
          CONTAINER_ID=$(docker ps -q --filter ancestor=ygopro-builder:latest)
          docker cp "$CONTAINER_ID:/workspace/build/ygopro" base-repo/build/ygopro
          echo "‚úÖ Binario copiado fuera del contenedor."

      - name: Upload YGOPRO Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ygopro-binary
          path: base-repo/build/ygopro

      - name: Log - Build Completed
        run: echo "üéâ Proceso completado exitosamente. Binario generado y almacenado como artefacto."





















